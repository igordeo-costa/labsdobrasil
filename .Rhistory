nsims = 1000)
poder.paired(n = 30,
mu1 = 150,
mudiff = 40,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 80,
sigma2 = 80,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 10,
sigma2 = 10,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 30,
sigma2 = 30,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
require(mvtnorm)
require(ggplot2)
require(dplyr)
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2)) +
theme_classic() +
labs(x = "p-valor", y = "Density")
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 30,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 30,
mu1 = 150,
mudiff = 40,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 80,
sigma2 = 80,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.01), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.01, y = 0.2)) +
theme_classic() +
labs(x = "p-valor", y = "Density")
}
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
poder.paired2 <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.1) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.1), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.1, y = 0.2)) +
theme_classic() +
labs(x = "p-valor", y = "Density")
}
poder.paired2(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 20,
sigma2 = 20,
rho12 = 0.3,
nsims = 1000)
setwd(getwd())
getwd()
setwd(getwd())
getwd()
# Diretório de trabalho
setwd("/home/dados/LabsBrasil/BR_UF_2020/labsdobrasil")
getwd()
# Diretório de trabalho
setwd("/home/dados/LabsBrasil/BR_UF_2020/labsdobrasil")
getwd()
# Diretório de trabalho
setwd("/home/dados/LabsBrasil/BR_UF_2020/labsdobrasil")
getwd()
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
teste <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Definir uma paleta de cores
pal <- colorBin("Greens", domain = NULL, n=5)
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
# Salvar o mapa como HTML
saveWidget(x, "./LabsDoBrasil.html")
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
teste <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Definir uma paleta de cores
pal <- colorBin("Greens", domain = NULL, n=5)
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
# Salvar o mapa como HTML
saveWidget(x, "./LabsDoBrasil.html")
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
teste <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Definir uma paleta de cores
pal <- colorBin("Greens", domain = NULL, n=5)
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
?addMarkers
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
group = teste@data[["Tipo"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
group = teste@data[["Tipo"]],
color = ~pal(Tipo),
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
color = pal(teste@data[["Tipo"]]),
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Plotar o mapa
x <- leaflet(data = teste) %>%
addProviderTiles("CartoDB.Positron") %>%
## addPolygons(fillColor = ~pal(teste$UF),
##             fillOpacity = 0.1,
##             color = "#bae4b3",
##             weight = 1) %>%
addMarkers(lat = teste@data[["lat"]],
lng = teste@data[["lng"]],
popup = teste@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
x
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(Tipo)
)
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
labs <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Plotar o mapa
labs_map <- leaflet(data = labs) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lat = labs@data[["lat"]],
lng = labs@data[["lng"]],
popup = labs@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
labs
~# Salvar o mapa como HTML
saveWidget(labs, "./LabsDoBrasil.html")
# Ver o mapa
labs_map
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
labs <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Plotar o mapa
labs_map <- leaflet(data = labs) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lat = labs@data[["lat"]],
lng = labs@data[["lng"]],
popup = labs@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
labs_map
~# Salvar o mapa como HTML
saveWidget(labs, "./LabsDoBrasil.html")
# Salvar o mapa como HTML
saveWidget(labs, "./LabsDoBrasil.html")
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
labs <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Plotar o mapa
labs_map <- leaflet(data = labs) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lat = labs@data[["lat"]],
lng = labs@data[["lng"]],
popup = labs@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
labs_map
# Salvar o mapa como HTML
saveWidget(labs, "./LabsDoBrasil.html")
# Pacotes necessários
require(rgdal)
require(leaflet)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(htmlwidgets)
# Diretório de trabalho
setwd(getwd())
# Importanto arquivos de dados do IBGE com as shapes
# Disponíveis aqui: https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads
shp <- readOGR("./map-data/BR_UF_2020.shp", stringsAsFactors=FALSE, encoding="UTF-8")
# Ler os arquivos com os dados dos laboratórios
labs <- read.csv("./data/Labs.csv")
# Mesclar os shapes com os arquivos dos laboratórios by UF
labs <- merge(shp, labs, by.x = "SIGLA_UF", by.y = "UF", duplicateGeoms = TRUE)
# Plotar o mapa
labs_map <- leaflet(data = labs) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lat = labs@data[["lat"]],
lng = labs@data[["lng"]],
popup = labs@data[["Lab"]],
clusterOptions = markerClusterOptions(freezeAtZoom = 10))
# Ver o mapa
labs_map
# Salvar o mapa como HTML
saveWidget(labs_map, "./LabsDoBrasil.html")
